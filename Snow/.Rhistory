head(north_america_links)
north_america_links <- xpathSApply(north_america,"//tr/td[@class='rLeft a']/div[@class='name']/a href",xmlAttrs)
north_america_links <- xpathSApply(north_america,"//tr/td[@class='rLeft a']/div[@class='name']/a[@href]",xmlAttrs)
head(north_america_links)
t <- unlist(north_america_links)
t
head(t)
t <- t(t)
head(t)
na_link <- c('http://www.onthesnow.com/northern-america/profile.html')
north_america <- htmlParse(na_link)
north_america_links <- xpathSApply(north_america,"//tr/td[@class='rLeft a']/div[@class='name']/a[@href]",xmlAttrs)
north_america_links <- t(unlist(north_america_links))
head(north_america_links)
north_america_links <- xpathSApply(north_america,"//tr/td[@class='rLeft a']/div[@class='name']/a[@href]",xmlAttrs)
north_america_links <- data.frame(t(unlist(north_america_links)))
head(north_america_links)
north_america_links$resort <- gsub('/(\\S+/\\S+)\.*','\\1',north_america_links$href)
north_america_links$resort <- gsub('/(\\S+/\\S+)/.*','\\1',north_america_links$href)
head(north_america_links)
length(north_america_links)
nrow(north_america_links)
years[1:5]
source('~/GitHub/Resources/Snow/snow all north america.R', echo=TRUE)
head(snow)
north_america_links$title[i]
source('~/.active-rstudio-document', echo=TRUE)
as.character(north_america_links$title[i])
gsub('(.*)/.*','\\1',resort)
resort
head(snow_raw)
??proper case
??proper
s
gsub('(.*)/.*','\\1',north_america_links$resort[i])
source('~/GitHub/Resources/Snow/snow all north america.R', echo=TRUE)
head(snow)
head(snow_plot)
snow_plot <- select(snow,month,day,year,daily_snowfall,resort)#,cum_snowfall,base_depth)
snow_plot <- melt(snow_plot,id=c('month','day','year','resort','state'))
snow_plot$date <- with(snow_plot,as.Date(paste(day,tolower(month),year),'%d %b %Y'))
snow_plot <- select(snow,month,day,year,daily_snowfall,resort,state)#,cum_snowfall,base_depth)
snow_plot <- melt(snow_plot,id=c('month','day','year','resort','state'))
snow_plot$date <- with(snow_plot,as.Date(paste(day,tolower(month),year),'%d %b %Y'))
snow_plot$month <- factor(snow_plot$month,levels=c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'))
snow_plot$winter <- with(snow_plot,paste(ifelse(as.numeric(month) < 9, year, as.character(as.numeric(year)+1))))
snow_plot$winter_month <- factor(snow_plot$month,levels=c('Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug'))
ggplot(data=filter(snow_plot,variable=='daily_snowfall'),aes(order=winter_month,x=winter_month,weight=value))+
geom_bar()+
facet_grid(state~winter)+
labs(x='Month',y='Total snowfall (inches)',title='North America ski resort snowfall by month')+
theme(axis.text.x = element_text(angle = 45, hjust = 1),plot.title=element_text(size=18,face='bold',vjust=2,hjust=0))
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/Resources/Snow/snow all north america.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(snow_raw)
snow_link
?if
?ifelse
if(1<2) {cat('test') else cat('test2')}
if (1<2) {cat('test') else cat('test2')}
if (1<2) {cat('test')
else cat('test2')}
if (1<2 == TRUE) {cat('test')
else cat('test2')}
if (1<2 == TRUE) {
test <- 1
}
1<2
if (1<2 == TRUE) {
test <- c(1)
}
condition <- 1<2
condition
if(condition == TRUE) {x <- TRUE
else x <- FALSE
}
1+1
condition <- 1<2
if(condition == TRUE) {x <- TRUE
else x <- FALSE
}
if(condition == TRUE) {x <- TRUE
}
if (1<2 == TRUE) {test <- c(1)
else test <- c(2)
}
if (1<2 == TRUE) {test <- c(1)
}
if (1<2 == TRUE) {test <- c(1)
if (1<2 == TRUE) {test <- c(1)
if (1<2 = TRUE) {test <- c(1)
if (1<2) {test <- c(1)
}
test
if (1<2) {test <- c(1)
else test <- c(2)
if (1<2) {test <- c(1)
else test <- c(2)
}
if (1<2) {test <- c(1)
else
test <- c(2)
}
if (1<2) {test <- c(1)
else
test <- c(2)}
if (1<2) {
test <- c(1)
} else
test <- c(2)
test
if (3<2) {
test <- c(1)
} else
test <- c(2)
#
# if ( statement1 ) {
#   statement2
# } else if ( statement3 ) {
#   statement4
# } else if ( statement5 ) {
#   statement6
# } else
#   statement8
test
length(snow_raw)
snow_raw
source('~/.active-rstudio-document', echo=TRUE)
length(snow_raw)
snow_raw <- readHTMLTable(nodes[[1]])
length(snow_raw)
source('~/.active-rstudio-document', echo=TRUE)
head(snow)
snow
snow_link
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/Resources/Snow/snow all north america.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
snow_data <- snow
snow_plot_data <- snow_plot
write.table(snow_data,'/Users/pgowey/GitHub/Resources/Snow/snow_data.txt',sep='\t',row.names=FALSE,col.names=TRUE,quote=FALSE)
write.table(snow_plot_data,'/Users/pgowey/GitHub/Resources/Snow/snow_plot_data.txt',sep='\t',row.names=FALSE,col.names=TRUE,quote=FALSE)
nrow(snow_data)
nrow(snow_plot_data)
head(snow_plot_data)
distinct(snow_plot_data$state)
table(snow_plot_data$state)
data.frame(table(snow_plot_data$state))
arrange(data.frame(table(snow_plot_data$state)),-Freq)
setwd('/Users/pgowey/GitHub/Resources/Snow')
getwd()
list.files
list.files()
snow <- read.table('~/snow_data.txt')
snow <- read.table('/snow_data.txt')
snow <- read.table('snow_data.txt')
head(snow)
nrow(snow)
snow1 <- read.table('snow_data.txt',header=TRUE,quote='')
snow1 <- read.table('snow_data.txt',header=TRUE,quote='',sep='\t')
head(snow1)
nrow(snow1)
nrow(snow)
snow_plot$region <- switch(snow_plot$state,
'Colorado' = 'Mountain West',
'British Columbia' = 'British Columbia, CA',
'California' = 'California',
'New York' = 'Northeast',
'Utah' = 'Mountain West',
'Michigan' = 'Midwest',
'Vermont' = 'Northeast',
'Washington' = 'Northwest',
'Montana' = 'Northwest',
'Idaho' = 'Northwest',
'Oregon' = 'Northwest',
'Quebec' = 'Quebec',
'New Hampshire' = 'Northeast',
'Pennsylvania' = 'Northeast',
'Wyoming' = 'Mountain West',
'Alberta' = 'Alberta',
'New Mexico' = 'Southwest',
'Wisconsin' = 'Midwest',
'Minnesota' = 'Midwest',
'Maine' = 'Northeast',
'Alaska' = 'Alaska',
'Ontario' = 'Ontario',
'Massachusetts' = 'Northeast',
'West Virginia' = 'Appalachia',
'Ohio' = 'Appalachia',
'Nevada' = 'Southwest',
'North Carolina' = 'Appalachia',
'Connecticut' = 'Northeast',
'Arizona' = 'Southwest',
'South Dakota' = 'Midwest',
'Illinois' = 'Midwest',
'Maryland' = 'Appalachia',
'Indiana' = 'Appalachia',
'Virginia' = 'Appalachia',
'Iowa' = 'Appalachia',
'New Jersey' = 'Northeast',
'Missouri' = 'Appalachia',
'Tennessee' = 'Applachia',
'Rhode Island' = 'Northeast'
)
snow_plot$region <- switch(snow_plot$state,'Colorado' = 'Mountain West',
'British Columbia' = 'British Columbia, CA',
'California' = 'California',
'New York' = 'Northeast',
'Utah' = 'Mountain West',
'Michigan' = 'Midwest',
'Vermont' = 'Northeast',
'Washington' = 'Northwest',
'Montana' = 'Northwest',
'Idaho' = 'Northwest',
'Oregon' = 'Northwest',
'Quebec' = 'Quebec',
'New Hampshire' = 'Northeast',
'Pennsylvania' = 'Northeast',
'Wyoming' = 'Mountain West',
'Alberta' = 'Alberta',
'New Mexico' = 'Southwest',
'Wisconsin' = 'Midwest',
'Minnesota' = 'Midwest',
'Maine' = 'Northeast',
'Alaska' = 'Alaska',
'Ontario' = 'Ontario',
'Massachusetts' = 'Northeast',
'West Virginia' = 'Appalachia',
'Ohio' = 'Appalachia',
'Nevada' = 'Southwest',
'North Carolina' = 'Appalachia',
'Connecticut' = 'Northeast',
'Arizona' = 'Southwest',
'South Dakota' = 'Midwest',
'Illinois' = 'Midwest',
'Maryland' = 'Appalachia',
'Indiana' = 'Appalachia',
'Virginia' = 'Appalachia',
'Iowa' = 'Appalachia',
'New Jersey' = 'Northeast',
'Missouri' = 'Appalachia',
'Tennessee' = 'Applachia',
'Rhode Island' = 'Northeast'
)
head(snow_plot$state)
snow_plot$region <- rep('',nrow(snow_plot))
head(snow_plot)
for (i in 1:nrow(snow_plot)) {
snow_plot[i,'region'] <- switch(snow_plot[i,'state'],'Colorado' = 'Mountain West',
'British Columbia' = 'British Columbia, CA',
'California' = 'California',
'New York' = 'Northeast',
'Utah' = 'Mountain West',
'Michigan' = 'Midwest',
'Vermont' = 'Northeast',
'Washington' = 'Northwest',
'Montana' = 'Northwest',
'Idaho' = 'Northwest',
'Oregon' = 'Northwest',
'Quebec' = 'Quebec',
'New Hampshire' = 'Northeast',
'Pennsylvania' = 'Northeast',
'Wyoming' = 'Mountain West',
'Alberta' = 'Alberta',
'New Mexico' = 'Southwest',
'Wisconsin' = 'Midwest',
'Minnesota' = 'Midwest',
'Maine' = 'Northeast',
'Alaska' = 'Alaska',
'Ontario' = 'Ontario',
'Massachusetts' = 'Northeast',
'West Virginia' = 'Appalachia',
'Ohio' = 'Appalachia',
'Nevada' = 'Southwest',
'North Carolina' = 'Appalachia',
'Connecticut' = 'Northeast',
'Arizona' = 'Southwest',
'South Dakota' = 'Midwest',
'Illinois' = 'Midwest',
'Maryland' = 'Appalachia',
'Indiana' = 'Appalachia',
'Virginia' = 'Appalachia',
'Iowa' = 'Appalachia',
'New Jersey' = 'Northeast',
'Missouri' = 'Appalachia',
'Tennessee' = 'Applachia',
'Rhode Island' = 'Northeast'
)
}
head(snow_plot)
write.table(snow_plot_data,'/Users/pgowey/GitHub/Resources/Snow/snow_plot_data.txt',sep='\t',row.names=FALSE,col.names=TRUE,quote=FALSE)
regions <- distinct(select(snow_plot,state,region))
head(snow)
snow <- left_join(snow,regions,by=c('state'='state'))
head(snow)
write.table(snow_data,'/Users/pgowey/GitHub/Resources/Snow/snow_data.txt',sep='\t',row.names=FALSE,col.names=TRUE,quote=FALSE)
source('~/GitHub/Resources/Snow/snow graphing.R', echo=TRUE)
snow_plot <- select(snow,month,day,year,daily_snowfall,resort,state,region)#,cum_snowfall,base_depth)
snow_plot <- melt(snow_plot,id=c('month','day','year','resort','state','region'))
snow <- read.table('snow_data.txt',header=TRUE,quote='',sep='\t')
snow_plot <- select(snow,month,day,year,daily_snowfall,resort,state,region)#,cum_snowfall,base_depth)
snow_data <- snow
snow_plot_data <- snow_plot
write.table(snow_data,'/Users/pgowey/GitHub/Resources/Snow/snow_data.txt',sep='\t',row.names=FALSE,col.names=TRUE,quote=FALSE)
write.table(snow_plot_data,'/Users/pgowey/GitHub/Resources/Snow/snow_plot_data.txt',sep='\t',row.names=FALSE,col.names=TRUE,quote=FALSE)
# other work should probably be done in another script
snow <- read.table('snow_data.txt',header=TRUE,quote='',sep='\t')
snow_plot <- select(snow,month,day,year,daily_snowfall,resort,state,region)#,cum_snowfall,base_depth)
regions <- distinct(select(snow_plot,state,region))
snow <- left_join(snow,regions,by=c('state'='state'))
snow_data <- snow
snow_plot_data <- snow_plot
write.table(snow_data,'/Users/pgowey/GitHub/Resources/Snow/snow_data.txt',sep='\t',row.names=FALSE,col.names=TRUE,quote=FALSE)
write.table(snow_plot_data,'/Users/pgowey/GitHub/Resources/Snow/snow_plot_data.txt',sep='\t',row.names=FALSE,col.names=TRUE,quote=FALSE)
head(snow_data)
nrow(snow_data)
nrow(snow_plot_data)
nrow(snow_plot)
source('~/GitHub/Resources/Snow/snow graphing.R', echo=TRUE)
snow_plot_filter <- filter(snow_plot,variable=='daily_snowfall',region=='British Columbia' | region=='California' | region=='Midwest' | region=='Mountain West' | region=='Northeast' | region=='Northwest')
ggplot(data=filter(snow_plot,variable=='daily_snowfall'),aes(order=winter_month,x=winter_month,weight=value))+
geom_bar()+
facet_grid(region~winter)+
labs(x='Month',y='Total snowfall (inches)',title='North America ski resort snowfall by month')+
theme(axis.text.x = element_text(angle = 45, hjust = 1),plot.title=element_text(size=18,face='bold',vjust=2,hjust=0))
ggplot(data=snow_plot_filter,aes(order=winter_month,x=winter_month,weight=value))+
geom_bar()+
facet_grid(region~winter)+
labs(x='Month',y='Total snowfall (inches)',title='North America ski resort snowfall by month')+
theme(axis.text.x = element_text(angle = 45, hjust = 1),plot.title=element_text(size=18,face='bold',vjust=2,hjust=0))
data.frame(table(snow_plot_filter$region))
snow_plot_filter <- filter(snow_plot,variable=='daily_snowfall',region=='British Columbia, CA' | region=='California' | region=='Midwest' | region=='Mountain West' | region=='Northeast' | region=='Northwest')
ggplot(data=snow_plot_filter,aes(order=winter_month,x=winter_month,weight=value))+
geom_bar()+
facet_grid(region~winter)+
labs(x='Month',y='Total snowfall (inches)',title='North America ski resort snowfall by month')+
theme(axis.text.x = element_text(angle = 45, hjust = 1),plot.title=element_text(size=18,face='bold',vjust=2,hjust=0))
d <- read.table('~/Analysis/Directors/director_film_titles.txt')
d <- read.table('~/Analysis/Directors/director_film_titles.txt',sep='\t',quote='',header=TRUE)
head(d)
head(dir_agg)
library(ggplot2)
library(dplyr)
################################################################
# import list of academy award winning or nominated directors
directors <- read.table('/Users/pgowey/Analysis/Directors/directors.txt',sep=',',header=FALSE,stringsAsFactors=FALSE)
names(directors)  <- c("wins","name","nominations")
directors <- directors[,c(2,3,1)]
directors$win_pct <- round(directors$wins/directors$nominations,2)
#clean up this guy's name
directors$name <- gsub('Miloš Forman','Milos Forman',directors$name)
#take out JL because he isn't important enough on IMDB
directors <- directors[-grep('Josh.*Logan.*',directors$name),]
directors$rank <- rank(-directors$nominations,ties.method='random')
################################################################
# read full filmography of all directors, numerate year
films <- read.table('/Users/pgowey/Analysis/directors/director_film_titles.txt',sep='\t',header=TRUE,quote='',fill=TRUE,stringsAsFactors=FALSE)
films <- filter(films,is_film=='TRUE')
films$year <- gsub('.*([0-9]{4}).*','\\1',films$release_date)
films$year <- as.numeric(films$year)
################################################################
# aggregate director films and filter set to directors with median production year > 1960 (modern era)
dir_agg <- summarise(group_by(films,director,year),avg_rating=mean(rating,na.rm=TRUE))
dir_filter <- summarise(group_by(films,director),overall_rating=mean(rating,na.rm=TRUE),med_year=median(year,na.rm=TRUE)) %>% filter(med_year>1960) %>% select(director,overall_rating)
dir_filter$overall_ranking <- rank(-dir_filter$overall_rating,ties.method='min')
dir_agg <- inner_join(dir_agg,dir_filter,by=c('director'='director'))
################################################################
# define years object for creating a complete timeline for all directors
years <- c((min(dir_agg$year,na.rm=TRUE)):2014)
years <- data.frame(years)
names(years) <- c('year')
class(years) <- c('data.frame')
# using base package because dplyr has no full outer join option
directors <- inner_join(directors,dir_filter,by=c('name'='director'))
years <- merge(years,select(directors,name,rank,overall_ranking),all=TRUE)
################################################################
# define limits for top n directors, for now not excluding anyone
# note... seems to be a problem with the dynamic upper bound. shouldn't use.
m <- 0
n <- 24
# n <- nrow(distinct(select(years,name)))
years <- select(filter(years,overall_ranking > m & overall_ranking <= n),year,name,overall_ranking)
# years <- select(years,year,name,overall_ranking)
dir_top_n <- left_join(years,select(dir_agg,-overall_ranking),by=c('year'='year','name'='director'))
# redefine name as a factor to influence ordering of facet grid later
dir_top_n_reorder <- select(arrange(dir_top_n,overall_ranking),name)
dir_top_n$name <- factor(dir_top_n$name,dir_top_n_reorder$name)
head(dir_agg)
head(dir_top_n)
# this is the final graph I used - slightly diff version from the one above.
# shows all films instead of films agg'd to a year.
dir_top_n <- left_join(years,films,by=c('year'='year','name'='director'))
dir_top_n_reorder <- select(arrange(dir_top_n,overall_ranking),name)
dir_top_n$name <- factor(dir_top_n$name,dir_top_n_reorder$name)
ggplot(data=dir_top_n,aes(x=year,y=rating,colour=rating))+
geom_point()+
scale_colour_gradient(low="#EAF3EE", high="#16452B",guide=FALSE)+
#   scale_color_manual(values=c('#EBF0E6'),guide=FALSE)
ylim(min(dir_top_n$rating)-0.1,max(dir_top_n$rating)+0.1)+
xlim(min(dir_top_n$year)-1,max(dir_top_n$year)+1)+
facet_wrap(~name,ncol=4)+
geom_smooth(method='loess',se=FALSE,colour='seagreen')+
labs(x='Year',y='Average Film Rating',title='IMDB Film Ratings for Top 24 Modern-Era Oscar Nominated Directors')+
theme(plot.title = element_text(size=18, face="bold", vjust=2,hjust=0))
# scatterplot directors by overall avg rating?
# '#009E73','#E69F00'
# scale_colour_gradient(low="#009E73", high="#E69F00",guide=FALSE)+
# scale_colour_gradient(low="#EBF0E6", high="#142900",guide=FALSE)+
head(d)
arrange(filter(d,director=='Stanley Kubrick'),release_date)
arrange(filter(d,director=='Stanley Kubrick'),release_date)
head(films)
arrange(filter(films,director=='Stanley Kubrick'),year)
arrange(filter(films,director=='Stanley Kubrick'),-year)
install.packages("UsingR")
library(UsingR)
?father.son
head(father.son)
average(father.son$sheight)
mean(father.son$sheight)
library(dplyr)
mean(select(filter(father.son,round(father.son$fheight,0)==71),sheight))
head(filter(father.son,round(father.son$fheight,0)==71))
head(select(filter(father.son,round(father.son$fheight,0)==71),sheight))
head(select(filter(father.son,round(father.son$fheight,0)==71),fheight))
filter(father.son,round(father.son$fheight,0)==71)
filter(father.son,round(father.son$fheight,0)==71) %>% select(sheight)
?select
filter(father.son,round(father.son$fheight,0)==71) %>% dplyr::select(sheight)
library(dplyr)
mean(dplyr::select(filter(father.son,round(father.son$fheight,0)==71),sheight))
dplyr::select(filter(father.son,round(father.son$fheight,0)==71),sheight)
mean(dplyr::select(filter(father.son,round(father.son$fheight,0)==71),sheight))
class(father.son$fheight)
class(father.son$sheight)
s <- dplyr::select(filter(father.son,round(father.son$fheight,0)==71),sheight)
s
class(s)
mean(s)
head(s)
mean(s$sheight)
matrix(1:1000,100,10)[25,3]
a <- cbind(x*1,x*2,x*3,x*4,x*5)
x <- 1:10
a <- cbind(x*1,x*2,x*3,x*4,x*5)
a
sum(a[7,])
matrix(1:60,20,3)
matrix(1:60,20,3,byrow=TRUE)
x <- matrix(1:10,2)
x
x*1
t(t(x))
x%*%diag(ncol(x))
diag(ncol(x))
x %*% matrix(1,ncol(x))
matrix(1,ncol(x))
a1 <- c( 3, 4,-5, 1)
a2 <- c( 2, 2, 2,-1)
a3 <- c( 1,-1, 5,-5)
a4 <- c( 5, 0, 0, 1)
a1
rbind(a1,a2,a3,a4)
b <- matrix(c(10,5,7,4),1)
b
b <- matrix(c(10,5,7,4),ncol=1)
b
a
b
a <- rbind(a1,a2,a3,a4)
a
b
solve(a)
solve(a)%*%b
solve(a)%*%b -> c
c
a %*% c
b
solve(a,b)
?solve
as.complex(b)
a <- matrix(1:12, nrow=4)
b <- matrix(1:15, nrow=3)
a
b
c <- a %*% b
c[3,2]
a[3,] %*% b[,2]
a[3,] * b[,2]
sum(a[3,] * b[,2])
X <- matrix(c(1,1,1,1,0,0,1,1),nrow=4)
rownames(X) <- c("a","a","b","b")
x
X
beta <- c(5,2)
x[rowname=='a']
x[row=='a']
x['a',]
X['a',]
x <- X %*% beta
x
X <- matrix(c(1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1),nrow=6)
rownames(X) <- c("a","a","b","b","c","c")
beta <- c(10,3,-3)
X
X %*% beta
